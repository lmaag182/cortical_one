from nupic.swarming import permutations_runner
from tools import convert_csv, prepare_swarm
import os,json, pickle
from tools import next_file_name

def run_swarm_ng(working_dir,sensors_dir, sensor, store, swarmconfig):
    store_dir = sensors_dir + sensor + '/stores/' + store +'/'
    swarms_dir = store_dir  + '/swarms/'
    swarm_dir = next_file_name(prefix='swarm',suffix='',path=swarms_dir)
    path,swarm = os.path.split(swarm_dir)
    swarm_dir = swarm_dir + '/'
    egg_file = swarm_dir + "eggs.csv"
    store_file = store_dir + 'out.csv'


    swarmconfig['streamDef']['streams'][0]['source'] = 'file://' + egg_file
    print swarmconfig['streamDef']['streams'][0]['source']

    if not os.path.exists(swarms_dir):
        os.makedirs(swarms_dir)

    if not os.path.exists(swarm_dir):
        os.makedirs(swarm_dir)

    fieldNames = map(lambda x: x['fieldName'],swarmconfig['includedFields'])
    fieldTypes = map(lambda x: x['fieldType'],swarmconfig['includedFields'])

    prepare_swarm(field_names=fieldNames, field_types= fieldTypes, egg_file=egg_file, store_file = store_file)
    #swarm_config = {}  # complete swarm config here
    #nupic_config = permutations_runner.runWithJsonFile(os.getcwd() + "/nupic/search_def.json",{'maxWorkers': 6, 'overwrite': True}, "test", os.getcwd() + "/working")

    nupic_config = permutations_runner.runWithConfig(swarmconfig,
                                                     {'maxWorkers': 6,
                                                      'overwrite': True
                                                      },
                                                     outDir= swarm_dir,
                                                     outputLabel='',
                                                     permWorkDir= swarm_dir,
                                                     verbosity=1)

    #dump the model params generated by this swarm in 2 different file formats
    pickle_file = open(swarm_dir + 'model_params.pkl', 'w')
    pickle.dump(nupic_config,pickle_file,pickle.HIGHEST_PROTOCOL)
    pickle_file.close()
    json_file = open(swarm_dir +'model_params.json', 'w')
    json.dump(nupic_config, json_file)
    json_file.close()
    #dump the swarmconfig used for this swarm in 2 different file formats
    pickle_file = open(swarm_dir + 'swarm_config.pkl', 'w')
    pickle.dump(swarmconfig,pickle_file,pickle.HIGHEST_PROTOCOL)
    pickle_file.close()
    json_file = open(swarm_dir+ 'swarm_config.json', 'w')
    json.dump(swarmconfig, json_file)
    json_file.close()

    return swarm

def go():
    pass